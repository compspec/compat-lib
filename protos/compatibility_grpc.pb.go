// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: protos/compatibility.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CompatibilityServiceClient is the client API for CompatibilityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompatibilityServiceClient interface {
	CheckCompatibility(ctx context.Context, in *CompatRequest, opts ...grpc.CallOption) (*Response, error)
}

type compatibilityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCompatibilityServiceClient(cc grpc.ClientConnInterface) CompatibilityServiceClient {
	return &compatibilityServiceClient{cc}
}

func (c *compatibilityServiceClient) CheckCompatibility(ctx context.Context, in *CompatRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/convergedcomputing.org.grpc.v1.CompatibilityService/CheckCompatibility", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompatibilityServiceServer is the server API for CompatibilityService service.
// All implementations must embed UnimplementedCompatibilityServiceServer
// for forward compatibility
type CompatibilityServiceServer interface {
	CheckCompatibility(context.Context, *CompatRequest) (*Response, error)
	mustEmbedUnimplementedCompatibilityServiceServer()
}

// UnimplementedCompatibilityServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCompatibilityServiceServer struct {
}

func (UnimplementedCompatibilityServiceServer) CheckCompatibility(context.Context, *CompatRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckCompatibility not implemented")
}
func (UnimplementedCompatibilityServiceServer) mustEmbedUnimplementedCompatibilityServiceServer() {}

// UnsafeCompatibilityServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompatibilityServiceServer will
// result in compilation errors.
type UnsafeCompatibilityServiceServer interface {
	mustEmbedUnimplementedCompatibilityServiceServer()
}

func RegisterCompatibilityServiceServer(s grpc.ServiceRegistrar, srv CompatibilityServiceServer) {
	s.RegisterService(&CompatibilityService_ServiceDesc, srv)
}

func _CompatibilityService_CheckCompatibility_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompatRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompatibilityServiceServer).CheckCompatibility(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/convergedcomputing.org.grpc.v1.CompatibilityService/CheckCompatibility",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompatibilityServiceServer).CheckCompatibility(ctx, req.(*CompatRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompatibilityService_ServiceDesc is the grpc.ServiceDesc for CompatibilityService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompatibilityService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "convergedcomputing.org.grpc.v1.CompatibilityService",
	HandlerType: (*CompatibilityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckCompatibility",
			Handler:    _CompatibilityService_CheckCompatibility_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/compatibility.proto",
}
